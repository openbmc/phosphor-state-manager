#!/bin/sh

OPTS="bmcstate,bootprogress,chassisoff,chassison,chassisstate,hoststate,\
power,poweroff,poweron,state,status"

USAGE="Usage: obmcutil [-h]
                {$OPTS}"

SERVICE_ROOT=xyz.openbmc_project
SERVICE_CONTROL=$SERVICE_ROOT.State

OBJECT_ROOT=/xyz/openbmc_project
OBJECT_CONTROL=$OBJECT_ROOT/state

print_help ()
{
    echo "$USAGE"
    echo ""
    echo "positional arguments:"
    echo "  {$OPTS}"
    echo ""
    echo "optional arguments:"
    echo "  -h, --help          show this help message and exit"
}

call ()
{
    busctl $1 | cut -d '"' -f2
}

set_property ()
{
    call "set-property $1 $2 $3 $4 $5"
}

get_property ()
{
    call "get-property $1 $2 $3 $4"
}

state_query ()
{
    STATE=$(get_property $1 $2 $3 $4)
    printf "%-20s: %s\n" $4 $STATE
}

parse_arg ()
{
    case "$1" in
        chassisoff)
            OBJECT=$OBJECT_CONTROL/chassis0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE
            PROPERTY=RequestedPowerTransition
            VALUE=xyz.openbmc_project.State.Chassis.Transition.Off
            STATE=$(set_property $SERVICE $OBJECT $INTERFACE $PROPERTY "s $VALUE")
            ;;
        chassison)
            OBJECT=$OBJECT_CONTROL/chassis0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE
            PROPERTY=RequestedPowerTransition
            VALUE=xyz.openbmc_project.State.Chassis.Transition.On
            STATE=$(set_property $SERVICE $OBJECT $INTERFACE $PROPERTY "s $VALUE")
            ;;
        poweroff)
            OBJECT=$OBJECT_CONTROL/host0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE
            PROPERTY=RequestedHostTransition
            VALUE=xyz.openbmc_project.State.Host.Transition.Off
            STATE=$(set_property $SERVICE $OBJECT $INTERFACE $PROPERTY "s $VALUE")
            ;;
        poweron)
            OBJECT=$OBJECT_CONTROL/host0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE
            PROPERTY=RequestedHostTransition
            VALUE=xyz.openbmc_project.State.Host.Transition.On
            STATE=$(set_property $SERVICE $OBJECT $INTERFACE $PROPERTY "s $VALUE")
            ;;
        bmcstate)
            OBJECT=$OBJECT_CONTROL/bmc0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE
            PROPERTY=CurrentBMCState
            state_query $SERVICE $OBJECT $INTERFACE $PROPERTY
            ;;
        chassisstate)
            OBJECT=$OBJECT_CONTROL/chassis0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE
            PROPERTY=CurrentPowerState
            state_query $SERVICE $OBJECT $INTERFACE $PROPERTY
            ;;
        hoststate)
            OBJECT=$OBJECT_CONTROL/host0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE
            PROPERTY=CurrentHostState
            state_query $SERVICE $OBJECT $INTERFACE $PROPERTY
            ;;
        state|status)
            for query in bmcstate chassisstate hoststate
            do
                parse_arg $query
            done
            ;;
        bootprogress)
            OBJECT=$OBJECT_CONTROL/host0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE_CONTROL.Boot.Progress
            PROPERTY=BootProgress
            state_query $SERVICE $OBJECT $INTERFACE $PROPERTY
            ;;
        power)
            OBJECT=/org/openbmc/control/power0
            SERVICE=$(mapper get-service $OBJECT)
            INTERFACE=$SERVICE
            for property in pgood state pgood_timeout
            do
                # get_property can potentially return several
                # different formats of values, so we do the parsing outside
                # of get_property depending on the query. These queries
                # return 'i VALUE' formatted strings.
                STATE=$(get_property $SERVICE $OBJECT $INTERFACE $property \
                    | sed 's/i[ ^I]*//')
                printf "%s = %s\n" $property $STATE
            done
            ;;
        -h|--help)
            print_help
            ;;
        *)
            echo "ERROR: Invalid Choice: '$1'"
            echo "$USAGE"
            ;;
    esac
}

parse_arg $1
