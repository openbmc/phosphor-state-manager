{
  "comments": [
    {
      "key": {
        "uuid": "b4a2968d_4387086a",
        "filename": "host_check.cpp",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "I read the whole file when seeing the diff comment.  Regardless of the change below this comment is becoming out of date.  In addition to documenting a hack.    \n\nI expect reading the gpio should be fast but could be an i2c transaction for a remote gpio.   \n\nStill faster than a round trip to the host.\n\nUpdate: Not so fast patch set 7 searches for the line 2-3 times per poll in addition to the request and release of the line.",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f017a49_9f254c6c",
        "filename": "host_check.cpp",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "In case of the firmware has more methods to verify the status of Host, I think it is better if BMC can call other methods if the previous method fails.\n\nBut I remove this change in this commit, I will move it to another one.",
      "parentUuid": "b4a2968d_4387086a",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72011363_c9c57b09",
        "filename": "host_check.cpp",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2021-10-27T02:47:39Z",
      "side": 1,
      "message": "Why do we need this change?",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "771561e3_5c8f6bb9",
        "filename": "host_check.cpp",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "In case of the firmware has more methods to verify the status of Host, I think it is better if BMC can call other methods if the previous method fails.\n\nBut I remove this change in this commit, I will move it to another one.",
      "parentUuid": "72011363_c9c57b09",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28a384d2_eaccb13b",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-10-27T20:58:51Z",
      "side": 1,
      "message": "I\u0027d like to see these under a host_condition_gpio/ directory to make it clear they are an implementation of the host-condition utilizing a GPIO.",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce05c754_72539127",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "So this code calls find line then throw it away and then call it again?\n\nFind ends up enumerating each gpio controller asking for the name of every gpio then checking for a match.\n\nInstead assign the result of find to the auto lineName",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94901d21_83c4c6aa",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I moved the finding gpio name to the constructor function. So this task shall be executed only 1 time.",
      "parentUuid": "ce05c754_72539127",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "346c6344_2738312f",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "If lineName false do the +\u003d \"-n\" and assign is active high, and assign result to new find",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e11126b_954484ee",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I moved the finding gpio name to the constructor function. So this task shall be executed only 1 time.",
      "parentUuid": "346c6344_2738312f",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56d35462_f9ba6d82",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 31,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "I\u0027m okay with the request every time, but is there a reason to repeatedly search for the line each time?   Only if we expect to hotplug the gpio controller (which I suppose could be an i2c gpio but we could restart when that happens).  \n\nInstead I\u0027d suggest the find should be done in the class startup and there\u0027s no reason to register if no gpio is found vs always returning unknown but since it\u0027s a configurable package that might look for more than one in the future I won\u0027t insist on this.",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43863c6d_3fc960b3",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 31,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I moved the finding gpio name to the constructor function. So this task shall be executed only 1 time.",
      "parentUuid": "56d35462_f9ba6d82",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97136aba_238e8a17",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "Just if lineName",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "233c1c3f_2c4be8c6",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I updated this point to if (!lineName.empty())",
      "parentUuid": "97136aba_238e8a17",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bda78d24_bc100544",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "Is this the right value for the gpio request failing?\n\nI\u0027ll note the other user just checks against running which is the conservative correct response here.",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66b97622_9146be86",
        "filename": "host_condition/host_condition.cpp",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I add try-catch to cover the reading gpio pin fails.",
      "parentUuid": "bda78d24_bc100544",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bd0b3a4_0542be1d",
        "filename": "host_condition/host_condition_main.cpp",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-10-27T20:58:51Z",
      "side": 1,
      "message": "Unless there\u0027s a good reason, I\u0027d prefer we stay consistent in phosphor-state-manager and utilize auto bus \u003d sdbusplus::bus::new_default(); (i.e. https://github.com/openbmc/phosphor-state-manager/blob/master/host_state_manager_main.cpp)",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbfae96e_0a488612",
        "filename": "host_condition/meson.build",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "The package dir is host condition as is the c source.   But the executable and service are phosphor host condition.   I didn\u0027t bother to figure out which meson package name evaluates.",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae0eb321_bfde7e38",
        "filename": "host_condition/meson.build",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I removed those redundant code",
      "parentUuid": "dbfae96e_0a488612",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc850c9a_6213d60a",
        "filename": "host_condition/meson.build",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-10-27T20:58:51Z",
      "side": 1,
      "message": "phosphor-host-condition-gpio",
      "range": {
        "startLine": 17,
        "startChar": 5,
        "endLine": 17,
        "endChar": 28
      },
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "960772aa_adfe6db3",
        "filename": "host_condition/meson.build",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I updated it to phosphor-host-condition-gpio",
      "parentUuid": "dc850c9a_6213d60a",
      "range": {
        "startLine": 17,
        "startChar": 5,
        "endLine": 17,
        "endChar": 28
      },
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f39eeeb9_ec41313d",
        "filename": "host_condition/phosphor-host-condition.service",
        "patchSetId": 7
      },
      "lineNbr": 7,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-10-27T20:58:51Z",
      "side": 1,
      "message": "This is hosting a D-Bus interface so lets make it a d-bus service:\nType\u003ddbus\nBusName\u003dxyz.openbmc_project.State.HostCondition.Gpio (?)",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 11
      },
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e10d85_3a7c200d",
        "filename": "meson_options.txt",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "Whitespace change confirm?",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90b36ea3_36a5e827",
        "filename": "meson_options.txt",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I added the new line to the end of this file",
      "parentUuid": "f2e10d85_3a7c200d",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cab16ff0_4d469032",
        "filename": "meson_options.txt",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-10-27T20:58:51Z",
      "side": 1,
      "message": "Lets put a default in here. Be nice to default to enabled for CI purposes but then people already using this repo would have to add a disable. Hmm, guess we\u0027ll have to default to disabled.",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bf5a58f_93e26357",
        "filename": "meson_options.txt",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T21:16:17Z",
      "side": 1,
      "message": "Should we create a ci config default for ci testing?",
      "parentUuid": "cab16ff0_4d469032",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbbe7442_b3aa2d8c",
        "filename": "meson_options.txt",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2021-11-01T15:02:31Z",
      "side": 1,
      "message": "Yeah, I think there\u0027s general agreement that we\u0027d like to have this for CI, but no one has done the leg work yet to get something consistent like that rolling within CI. I think this would be nice to have but outside the scope of this specific commit.",
      "parentUuid": "4bf5a58f_93e26357",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4c72eb7_4deaad72",
        "filename": "meson_options.txt",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I added the default value \"disabled\" of this option",
      "parentUuid": "dbbe7442_b3aa2d8c",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87f95f24_2ec55d29",
        "filename": "meson_options.txt",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2021-10-27T05:22:21Z",
      "side": 1,
      "message": "Missing new line at end of file",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9abc78_0950451f",
        "filename": "meson_options.txt",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2021-11-03T09:06:52Z",
      "side": 1,
      "message": "I added the new line to the end of this file",
      "parentUuid": "87f95f24_2ec55d29",
      "revId": "8bda2f2e928821bc65b0926d90c648b3c58ef17c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}